const{minify}=require("terser");const fs=require("fs/promises");const path=require("path");const glob=require("glob-promise");const THEME_ROOT=path.join(__dirname,"../..");const SOURCE_DIR=path.join(THEME_ROOT,"source/js");const BUILD_DIR=path.join(THEME_ROOT,"source/js/build");const IGNORE_PATTERNS=[path.join(SOURCE_DIR,"libs/**"),path.join(BUILD_DIR,"**"),path.join(SOURCE_DIR,"build.js")];const minifyOptions={compress:{dead_code:true,drop_console:false,drop_debugger:true,keep_classnames:true,keep_fnames:true},mangle:{keep_classnames:true,keep_fnames:true},format:{comments:false},module:true,sourceMap:{filename:"source-map",url:"source-map.map"}};async function ensureDirectoryExists(o){try{await fs.mkdir(o,{recursive:true})}catch(e){if(e.code!=="EEXIST"){throw new Error(`Failed to create directory ${o}: ${e.message}`)}}}async function copyFile(o,e){try{const s=path.dirname(e);await ensureDirectoryExists(s);await fs.copyFile(o,e);console.log(`✓ Copied ${o} -> ${e}`)}catch(e){console.error(`× Error copying ${o}:`,e);throw e}}async function processFile(o){try{const e=await fs.readFile(o,"utf8");const s=path.relative(SOURCE_DIR,o);const t=path.join(BUILD_DIR,s);const r=path.dirname(t);const i={...minifyOptions,sourceMap:{...minifyOptions.sourceMap,filename:path.basename(o),url:`${path.basename(o)}.map`}};const n=await minify(e,i);await ensureDirectoryExists(r);await fs.writeFile(t,n.code);if(n.map){await fs.writeFile(`${t}.map`,n.map)}console.log(`✓ Minified ${o} -> ${t}`)}catch(e){console.error(`× Error processing ${o}:`,e);throw e}}async function minifyJS(){try{await ensureDirectoryExists(BUILD_DIR);const e=await glob(`${SOURCE_DIR}/libs/**/*.js`);const o=await glob(`${SOURCE_DIR}/**/*.js`,{ignore:IGNORE_PATTERNS});if(o.length===0&&e.length===0){console.log("No JavaScript files found to process");return}console.log(`Found ${o.length} files to minify and ${e.length} lib files to copy...`);for(const r of e){const i=path.relative(SOURCE_DIR,r);const n=path.join(BUILD_DIR,i);await copyFile(r,n)}const s=4;const t=[];for(let e=0;e<o.length;e+=s){t.push(o.slice(e,e+s))}for(const a of t){await Promise.all(a.map(processFile))}console.log("\n✓ All files processed successfully!")}catch(e){console.error("× Build failed:",e);process.exit(1)}}minifyJS().catch(e=>{console.error("× Unhandled error:",e);process.exit(1)});